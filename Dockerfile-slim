FROM eclipse-temurin:17-jdk-alpine AS jre-build
WORKDIR /build

ENV JAR mod-reservoir-server-fat.jar

# copy the executable jar into the docker image
COPY server/target/$JAR $JAR

# copy mdodules into image
COPY server/target/compiler/* modules/

# this fails due to a bug in jdeps, see https://stackoverflow.com/questions/69943899/jdeps-cant-print-module-deps-due-to-a-multireleaseexception
# # find JDK dependencies dynamically from jar
# RUN jdeps \
# # suppress any warnings printed to console
# -q \
# # add modules
# --module-path modules \
# # java release version targeting
# --multi-release 17 \
# # output the dependencies at end of run
# --print-module-deps \
# # pipe the result of running jdeps on the app jar to file
# $JAR > jre-deps.info

ENV MODULES java.base,java.sql,jdk.management,jdk.unsupported,org.graalvm.sdk,jdk.internal.vm.ci,jdk.internal.vm.compiler,jdk.internal.vm.compiler.management

RUN jlink --verbose \
--module-path modules \
--compress 2 \
--strip-java-debug-attributes \
--no-header-files \
--no-man-pages \
--output jre \
--add-modules $MODULES

# take a smaller runtime image for the final output
FROM alpine:latest
WORKDIR /deployment

# copy the custom JRE produced from jlink
COPY --from=jre-build /build/jre jre

# copy the jar
COPY --from=jre-build /build/$JAR $JAR

# run the jar on startup
ENTRYPOINT jre/bin/java -XX:+UnlockExperimentalVMOptions -XX:+EnableJVMCI -jar *.jar

# Expose port locally in the container.
EXPOSE 8081
